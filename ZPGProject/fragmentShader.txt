#version 330
uniform vec4 lightPosition;
uniform vec4 lightColor;
uniform vec3 viewPosition;
uniform vec3 materialAmbient;
uniform vec3 materialDiffuse;
uniform vec3 materialSpecular;
uniform float shininess;
out vec4 frag_colour;
in vec4 ex_worldPosition;
in vec3 ex_worldNormal;
void main () {
     vec4 lightDirection = normalize(lightPosition - ex_worldPosition);
     float dot_product = max(dot(lightDirection, normalize(vec4(ex_worldNormal, 1.0))), 0.0);
     vec4 diffuse = dot_product * vec4(materialDiffuse, 1.0);
     vec4 ambient = vec4( 0.2f, 0.2f, 0.2f, 1.0) * vec4(materialAmbient, 1.0);
     vec3 viewDirection = normalize(viewPosition - vec3(ex_worldPosition));
     vec3 reflectDirection = reflect(vec3(-lightDirection), ex_worldNormal);
     float dot_product2 = pow(max(dot(viewDirection, reflectDirection), 0.0), shininess);
     vec4 specular = vec4(1.0) * (dot_product2 * vec4(materialSpecular, 1.0));
     frag_colour = ambient + diffuse + specular;
}